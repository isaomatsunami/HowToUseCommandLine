# コマンドライン講義シナリオ

# テスクトップにtestというフォルダを作り、Githubのファイルを展開して中に入れる
# (windowsの場合) test内にbusyBoxを置く
# 画面の左にフォルダを開いた状態で、右半分にターミナルを配置

# フォルダに移動する
cd Desktop
ls
cd test

# (windowsの場合)busyBox.exe bashを実行する

# 自分の位置を知る
pwd

# 以下のコマンドを説明なしで実行してもらい
echo 'Hello' > test.txt
# ファイルの中身を見るコマンドも後で説明する
cat test.txt

# フォルダにファイルが作られたことを確認する

# ディレクトリを作る
mkdir temp

# ファイルリストを見る。aはall、lは詳細形式
ls
ls -a
ls -l

# Rオプションは再帰的、rオプションは逆順なので注意

ls -R

# ディレクトリを移動するにはcd
cd temp
pwd
ls -a

# 「.（ドット）」は現在のフォルダ（カレントディレクトリともいう）、「..（ドット２つ）」は一つ上のフォルダを意味する特殊記号
#️⃣　bashの履歴機能を使って、ファイルを作成する
echo 'Hello' > test.txt
ls

#️ 一つ上の階層に移動する
cd ..
pwd

## ファイルの操作
# ファイルの消去（ゴミ箱にも残らないので注意！）
rm test.txt
ls

# 今度はhelloという名前でファイルを作る
echo 'Hello' > hello.txt

# ファイル名を移動させる
mv hello.txt temp
cd temp
ls

# ファイル名を変える場合もmvを使う
mv test.txt new.txt
ls

# ファイルをコピーする場合
cp new.txt copy.txt

# コマンドラインの怖さは、GUIと異なり、警告が出ないことだ
# 名前を変更する場合、変更先が既存ファイルだと上書きしてしまう
mv copy.txt hello.txt
ls

# ..はいつでも使えるので、上の階層にファイルを移動することもできる
mv hello.txt ..
ls
cd ..

# フォルダを削除する
rmdir temp

# 中身があると削除できない。中身ごと削除するにはrオプションつきでrmする
rm -r temp

# 体操
mkdir temp
cd temp
copy ../hello.txt new.txt
cd ..
rm -r temp

# フォルダのrenameもmvでできる
mv HowToUseCommandLine howto

cd howto
ls
cd etude1

# address2016.txtのコピーを二つ上の階層に持っていきたい
cp address2016.txt ../..
cd ../..
ls

## ファイルの読み書き
# echoは標準出力に書き出す。標準出力とは通常は画面そのもの
# single quoteを使うことに注意！
echo 'Good morning'

# リダイレクトとは標準出力を変更すること
echo 'Good morning' > morning.txt

# catはファイルを標準出力に書き出す
cat morning.txt

# catとリダレクトを使うと実質的にコピーできる
cat morning.txt > new.txt
cat new.txt

# address2016も見てみよう
cat address2016.txt

# 最初と最後だけ見たい場合もおおい
head -n 10 address2016.txt
tail -n 10 address2016.txt

# lessはエディタのように自由に閲覧できる
# エディタと違い、書き換えてしまう恐れがない
# 終了はq（quit）で、hで使い方が表示される
less address2016.txt

# catにはnオプションがある
cat -n address2016.txt

# tailには、+で「n行目以降」の意味がある
tail -n +7857 address2016.txt

## csvファイルの処理

# Ubuntuで日本語を入力するには、Ctrl+Space
echo '巨人,17,13' > baseballC.csv

# 追記リダイレクトは>>
echo '阪神,18,15' >> baseballC.csv
echo '広島,18,15' >> baseballC.csv
echo '中日,16,15' >> baseballC.csv
echo 'ヤクルト,15,18' >> baseballC.csv
echo 'DeNA,12,20' >> baseballC.csv
cat baseballC.csv

# パリーグは表計算ソフトで作ったデータが用意してある
cp howto/baseballP.csv baseballP.csv
cat baseballP.csv

# パイプは、最初のコマンドの標準出力が次のコマンドの入力になる仕組み
echo 'hello' | cat
# 問題はパイプでしか使えないコマンドもある。trがその例
# tr -d 'A'は削除、tr 'A' 'B'はAをBに置換する

echo 'hello' | tr -d 'h'
echo 'hello' | tr 'h' 'H'

# これによって、basballPの引用符を削除する
cat baseballP.csv | tr -d '"' > baseballP_trimmed.csv
cat baseballP_trimmed.csv

# catは複数のファイルをとることができる
cat baseballC.csv baseballP_trimmed.csv
cat baseballC.csv baseballP_trimmed.csv > baseball.csv
cat baseball.csv

# ソートする
sort baseball.csv
# sortコマンドは、tオプションで区切り文字、kで対象列（最初と最後を指定）
sort -t',' -k 3,3 baseball.csv
# 文字列扱いされている！ nオプションで数字扱いしてくれる
sort -t',' -nk 3,3 baseball.csv

# 勝利数順にするには
sort -t',' -nk 2,2 baseball.csv

# 新しいファイルを導入する
cp howto/manager.csv manager.csv
cat manager.csv
# 引用符をとる
cat manager.csv | tr -d '"' > manager_trimmed.csv
cat manager_trimmed.csv

# pasteは行ごとに結合する
paste baseball.csv manager_trimmed.csv

# 正しく結合させるにはjoinを使う
join -t',' -1 1 -2 1 baseball.csv manager_trimmed.csv

# joinは結合フィールド（列）を事前にソートしていあることが条件だった！
sort -t',' -k 1,1 baseball.csv > baseball_s.csv
sort -t',' -k 1,1 manager_trimmed.csv > manager_s.csv
join -t',' -1 1 -2 1 baseball_s.csv manager_s.csv

## (オプション)施政方針演説の単語カウント
# mecabが（UTF8辞書と一緒に）インストールされている必要があるので、mecabで処理した結果をaddress2016.txtとしてetude1に用意してある。

# （これは、mecabをインストールできた人の参考用）
cp howto/etude1/施政方針演説2016.txt speech2016.txt
mecab speech2016.txt > address2016.csv

# 結論だけ示すと
cat address2016.txt | tr ',' ' ' | awk '$2 == "名詞"' | cut -f 1 | sort -k 8,8 | uniq -c | sort

# 過程の示すと...
# 作業の目標は「名詞」だけを対象にし、何回使われたかをカウントすること

# ファイルは大きすぎるので最初の20行だけみる
head -n 20 address2016.txt

# 品詞を表す場所を「第２列目」のような形式で掴み取りたい。ところが、このファイルは、空白で分割してあるところと、コンマで分割してあるところがあるではないか。まず、空白分割に統一したい。それにはtrコマンド（置換＋除去のコマンド）でコンマを空白に置換する

head -n 20 address2016.txt | tr ',' ' '

# 空白で列をうまく分けられそうだ。第二列が「名詞」のところだけにしたい。（「固有名詞」はカウントしないことにする）

cat address2016.txt | tr ',' ' ' | awk '$2 == "名詞"'

# うまく、名詞の行だけになった！次は、単語だけにしたい。cutは必要な「列」だけにカットするコマンド

cat address2016.txt | tr ',' ' ' | awk '$2 == "名詞"' | cut -f 1

# 次はカウントしたいのだが、uniqというコマンドは「ソート済み」が条件（これは知っていないと分からない）

cat address2016.txt | tr ',' ' ' | awk '$2 == "名詞"' | cut -f 1 | sort -k 8,8

# uniqはcオプションで重複数も表示してくれる

cat address2016.txt | tr ',' ' ' | awk '$2 == "名詞"' | cut -f 1 | sort -k 8,8 | uniq -c

# 当然、頻度順に並べ替えたいからsort

cat address2016.txt | tr ',' ' ' | awk '$2 == "名詞"' | cut -f 1 | sort -k 8,8 | uniq -c | sort

# こんな作業は、熟練しないと無理。Excelでできるという人はExcelでやればいい。
# (ここまでオプション)

exit 0

## スクリプトとは

# もちろん、こんなことを表計算ソフトでできる。しかし、100万行の場合はこの方法しかない。
# また、以上のコマンドをファイルに書いておくと、一気に実行できる。
# このシナリオ自身も実行可能で、いままでやったこと（この行）を一気に実行するにはbash <scriptのfile>で可能

bash コマンドライン講義シナリオ.sh

# また、#を行頭に書けば（コマンドとは解釈されず無視される）、このようにメモとして書き残せるので、備忘録、引き継ぎ、処理の検証に役立つ。
# (GUI操作では偶然の誤操作を検証できない)

# スクリプトの価値は、プログラムを書くことが一番大きい。
# いかなるプログラム言語と同様、プログラムの効用は条件判定とループに尽きる。

# プログラムはとても微妙で、本を買って勉強するしかない。触りだけ初回する。

# sample01.shは以下のようなファイルです

hour=`date +%H`
# 以下のように書いても同じ
# hour=$(date +%H)

if [ "$hour" -lt 12 ]
then
echo "今は午前です"
else
echo "今は午後です"
fi

# dateとは現在時間を表示するコマンドです。+%Hというオプションを設定すると「何時か」を表示します。
date +%H

# hour=`date +%H`の部分は、表示結果をhourという変数に代入するという意味です。=の前後に空白があってはいけません。
# `はシングルバッククォートです（注意）
# この文が実行されると、hourという変数（入れ物）に「何時か」が入ります。ターミナルで実行してみましょう
hour=`date +%H`

# 変数の中身を見るには$マークを使います。表示コマンドはechoでした。
echo $hour

# $を忘れると、文字列にすぎなくなります。
echo hour

# if [ "$hour" -lt 12 ]の部分が条件判定です。[]の中身は、$hourと12を数字として比較し、-lt(より小さいという意味)だったら「0」になり、そうでないなら1になります。
# そして、0だったら、ifの次の行、then(英語で「その場合は」という意味)以降を、0以外だったら、else行以降を実行します。

# このように、条件に応じて実行するコマンドを振り分けていくことが「プログラムを書く」ということです。

# sample01.shを実行してみる
bash sample01.sh

# このようなプログラムの簡単な例がsample06まで用意してある。それぞれ、キーワード（forやinやdoやdoneなど）を使って、
# 条件を振り分けたり、コマンドを繰り返したり（ループ）、コマンドを中断したりします。
# 各自、中身を見て、実行してみてください。たとえば、

cat sample02.sh
bash sample02.sh

# 最後のsample06.shは終了コードの例です。
# 終了コードとは、あるコマンドが成功したかどうかの報告で、$?という特殊な変数に常に自動で代入されています。
# 例えば、存在しないフィアル（例えばhogehogehogehoge.txt）を閲覧してみましょう
cat hogehogehogehoge.txt
# そんなファイルはない（No such file or directory）と表示されます。
# この直後に$?の中身をみてみます
echo $?
# 失敗したので「1」が入っていました。

# 実在するファイルを開いた場合は「0」が入っています。
cat sample01.sh
echo $?

# なぜ、このような終了コードがあるのか。
# それは、スクリプトの中に、あるコマンドに成功した場合と失敗した場合の振り分けをしたいから。
# それがsample06のやっていること。

bash sample06.sh

# フォルダloopにあるファイルはループの例

# いずれも実行させてみる（プログラムの雛形として使って）


## （オプション）大量ファイルの一括処理

# etude03には、censusに国勢調査の調査区域別ファイルがある。（これは一部だけ）
# このファイルをexcelで一覧したい。つまり、１本のファイルにまとめたい。

# ファイルを見れば明らかなように、最初の２行は全ファイル共通。
# ファイルを単純に合体させた場合、最初の２行がファイルの本数分だけ重複してしまう！
# やりたいことは、最初の２行だけを除き、３行目以降を一つのファイルにまとめたい

# もし、10000本のファイルがあっても手作業でやりますか？

# ファイルをまとめて処理するループのパターンは、findFiles.shを参考にする

# 処理例はetude3/sample07.shをみて研究してください。

## コマンドは多種多彩
# これまで紹介したコマンドは、最も単純でよく使うものだけ。実際には無限にある。
# たとえば、wgetというコマンドは、ネット上のファイルをダウンロードするコマンド。
# wgetコマンドが標準装備されていないOSもあります。その場合、wgetコマンドをインストールしなければなりません。
# インストール方法は今回は省略します。

wget http://www.yahoo.co.jp

# これだけで、ヤフーのトップページが自分のパソコンに保存される。
# オプションも把握できないほど充実していて、たとえば、-Aオプションはそのページに含まれる
# 画像ファイル(jpg)ファイルだけを保存する

wget -A jpg http://www.yahoo.co.jp

# zipというコマンドはフォルダを圧縮するコマンド。-rオプションはフォルダの中身全部という意味
zip -r packed.zip targetFolder

# パスワードも設定できる
zip -P hirakegoma -r packed.zip targetFolder

# zipファイルを解凍するにはunzipという別のコマンドを使う
unzip pached.zip

# パスワード付きzipを解凍するには、Pオプションでパスワードを教える必要がある
unzip -P hirakegoma pached.zip


## 課題

financial_reports.zipを解凍してください。
このファイルが添付されていたメールには
「attached files are protected by your 4-digit PIN」
とありました。
（英語は、「このファイルは４桁の個人確認数字で保護されています」という意味）
